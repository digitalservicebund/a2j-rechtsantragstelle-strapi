diff --git a/node_modules/strapi-plugin-populate-deep/server/bootstrap.js b/node_modules/strapi-plugin-populate-deep/server/bootstrap.js
index cb357c6..768359b 100644
--- a/node_modules/strapi-plugin-populate-deep/server/bootstrap.js
+++ b/node_modules/strapi-plugin-populate-deep/server/bootstrap.js
@@ -5,7 +5,10 @@ module.exports = ({ strapi }) => {
   // Subscribe to the lifecycles that we are intrested in.
   strapi.db.lifecycles.subscribe((event) => {
     if (event.action === 'beforeFindMany' || event.action === 'beforeFindOne') {
-      const populate = event.params?.populate;
+      let populate = event.params?.populate
+      if (typeof populate === 'string') {
+        populate = [populate]
+      }
       const defaultDepth = strapi.plugin('strapi-plugin-populate-deep')?.config('defaultDepth') || 5
 
       if (populate && populate[0] === 'deep') {
diff --git a/node_modules/strapi-plugin-populate-deep/server/helpers/index.js b/node_modules/strapi-plugin-populate-deep/server/helpers/index.js
index 7f026b8..d0aa210 100644
--- a/node_modules/strapi-plugin-populate-deep/server/helpers/index.js
+++ b/node_modules/strapi-plugin-populate-deep/server/helpers/index.js
@@ -1,4 +1,20 @@
-const { isEmpty, merge } = require("lodash/fp");
+const { isEmpty } = require("lodash/fp");
+
+const deepAssign = (target, source) => {
+  for (const key in source) {
+    if (Object.prototype.hasOwnProperty.call(source, key)) {
+      if (typeof source[key] === 'object' && source[key] !== null) {
+        if (!target[key] || typeof target[key] !== 'object' || target[key] === null) {
+          target[key] = source[key];
+        }
+        deepAssign(target[key], source[key]);
+      } else if (!target[key] || typeof target[key] !== 'object' || target[key] === null) {
+        target[key] = source[key];
+      }
+    }
+  }
+  return target;
+}
 
 const getModelPopulationAttributes = (model) => {
   if (model.uid === "plugin::upload.file") {
@@ -32,7 +48,7 @@ const getFullPopulateObject = (modelUid, maxDepth = 20, ignore) => {
       } else if (value.type === "dynamiczone") {
         const dynamicPopulate = value.components.reduce((prev, cur) => {
           const curPopulate = getFullPopulateObject(cur, maxDepth - 1);
-          return curPopulate === true ? prev : merge(prev, curPopulate);
+          return curPopulate === true ? prev : deepAssign(prev, curPopulate);
         }, {});
         populate[key] = isEmpty(dynamicPopulate) ? true : dynamicPopulate;
       } else if (value.type === "relation") {
