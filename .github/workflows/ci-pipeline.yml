name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # Allow to run this workflow manually
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-strapi:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout strapi
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Install dependencies for plugins
        run: npm install
        working-directory: ./src/plugins/content-export-import
      - name: Run build
        run: npm run build

  build-push-image:
    needs: [build-strapi]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image from Dockerfile
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} . --build-arg COMMIT_SHA=${{ github.sha }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: "${{ env.IMAGE_NAME }}:${{ github.sha }}"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@81b419c908d540ec4c7da9bfb4b5d941fca8f624
        with:
          sarif_file: "trivy-results.sarif"

      - name: Login to container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push --all-tags ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    concurrency: deploy-staging
    environment: staging
    needs: build-push-image
    permissions:
      id-token: write # Enable OIDC for gitsign
    steps:
      - uses: chainguard-dev/actions/setup-gitsign@ac42db4c9c2e2bd9f66aadf3290c5995891d91a3
      - name: Deploy strapi image
        uses: digitalservicebund/github-actions/argocd-deploy@ccfe8dfdcadb4bd87d074b4e3c946453dfc98360
        with:
          environment: staging
          version: ${{ needs.build-push-image.outputs.version }}
          deploying_repo: a2j-rechtsantragstelle-strapi
          infra_repo: a2j-rechtsantragstelle-strapi-infra
          deploy_key: ${{ secrets.DEPLOY_KEY }}
          app: a2j-rechtsantragstelle-strapi
          argocd_pipeline_password: ${{ secrets.ARGOCD_PIPELINE_PASSWORD }}
          argocd_server: ${{ secrets.ARGOCD_SERVER }}
